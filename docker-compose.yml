version: "3.8"

services:
  jsonserver:                    # <<— AÇÍ, DINS DE "services:"
    image: node:20-alpine
    container_name: jsonserver
    working_dir: /app
    command: sh -c "npm i -g json-server && json-server --watch /data/products.json --host 0.0.0.0 --port 3000"
    volumes:
      - ./data:/data
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - pi_network 

  nginx:
    image: nginx:stable-alpine
    container_name: pi_nginx
    ports:
      - "8080:80"                            # frontend accesible en http://localhost:8080
    volumes:
      - ./frontend:/usr/share/nginx/html:ro  # sirve los archivos estáticos
      - ./.docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - php
    networks:
      - pi_network

  php:
    image:php: latest  
    build:
      context: ./.docker/php
      dockerfile: Dockerfile
    container_name: pi_php
    volumes:
      - ./backend:/var/www/html              # tu código PHP
    environment:
      - DB_HOST=db
      - DB_NAME=pi_db
      - DB_USER=pi_user
      - DB_PASS=pi_password
    networks:
      - pi_network
    depends_on:
      - db

  db:
    image: mysql:8.0
    container_name: pi_db
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=pi_db
      - MYSQL_USER=pi_user
      - MYSQL_PASSWORD=pi_password
    volumes:
      - db_data:/var/lib/mysql
      - ./database:/docker-entrypoint-initdb.d # scripts .sql para inicializar
    networks:
      - pi_network

      

volumes:
  db_data:

networks:
  pi_network:
    driver: bridge

